--
-- Create posts table
--
CREATE TABLE posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  slug TEXT UNIQUE NOT NULL,
  title TEXT NOT NULL,
  author TEXT NOT NULL,
  date TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  image TEXT,
  "dataAiHint" TEXT,
  excerpt TEXT,
  content TEXT,
  tags TEXT[]
);

--
-- Create admin_users table
--
CREATE TABLE admin_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL -- Note: Storing plain text passwords is not secure for production. Use Supabase Auth.
);

--
-- RLS policies for posts table
--
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access to posts"
  ON posts
  FOR SELECT
  USING (true);

CREATE POLICY "Allow admin users to insert posts"
  ON posts
  FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow admin users to update posts"
  ON posts
  FOR UPDATE
  USING (auth.role() = 'authenticated');

CREATE POLICY "Allow admin users to delete posts"
  ON posts
  FOR DELETE
  USING (auth.role() = 'authenticated');


--
-- Insert initial admin user
--
INSERT INTO admin_users (email, password)
VALUES ('Deepak', 'bagada1993');

--
-- Set up Storage Bucket for posts
--
INSERT INTO storage.buckets (id, name, public)
  VALUES ('posts', 'posts', true)
  ON CONFLICT (id) DO NOTHING;

--
-- RLS policies for posts storage bucket
--
CREATE POLICY "Allow public read access to post images"
  ON storage.objects
  FOR SELECT
  USING ( bucket_id = 'posts' );

CREATE POLICY "Allow admin users to upload post images"
  ON storage.objects
  FOR INSERT
  WITH CHECK ( bucket_id = 'posts' AND auth.role() = 'authenticated' );

CREATE POLICY "Allow admin users to update post images"
  ON storage.objects
  FOR UPDATE
  USING ( bucket_id = 'posts' AND auth.role() = 'authenticated' );

CREATE POLICY "Allow admin users to delete post images"
  ON storage.objects
  FOR DELETE
  USING ( bucket_id = 'posts' AND auth.role() = 'authenticated' );
